import java.util.*;

public class SemiPerfectPower{
    int[][] tbl;
    boolean[] tri_tbl;
    
    int[] nPrime;
    int[][] divisors;
    
    void init(int N, int M){
        tbl = new int[N+1][]; tri_tbl = new boolean[N+1];
        
        tbl[1] = new int[N+1];
        tbl[1][0] = 0;
        for(int i=1;i<=N;i++){
            tbl[1][i] = 1;
            tri_tbl[i] = false;
        }
        
        for(int i=2;i*i<=N;i++){
            int ip = i*i;
            for(int j=ip;j<=N;j+=ip) tbl[1][j] = 0;
        }
        for(int i=2;i*i*i<=N;i++){
            int ip = i*i*i;
            for(int j=ip;j<=N;j+=ip) tri_tbl[j] = true;
        }
        
        for(int i=2;i<=N;i++){
            int sz = N/i;
            tbl[i] = new int[sz+1];
            
            tbl[i][0] = 0;
            for(int j=1;j<=sz;j++) tbl[i][j] = tbl[i][j-1] + tbl[1][i*j];
        }
        for(int i=1;i<=N;i++) tbl[1][i] += tbl[1][i-1];
        
        nPrime = new int[M+1];
        divisors = new int[M+1][];
        for(int i=0;i<=M;i++){
            nPrime[i] = 0;
        }
        
        divisors[1] = new int[1]; divisors[1][0] = 1;
        
        for(int i=2;i<=M;i++){
            if(tbl[1][i] == tbl[1][i-1]){
                nPrime[i] = -1; continue;
            }
            if(nPrime[i] == 0){
                nPrime[i] = 1;
                for(int j=i*2;j<=M;j+=i) ++nPrime[j];
            }
            
            divisors[i] = new int[1<<nPrime[i]];
        }
        
        for(int i=2;i<=M;i++){
            if(nPrime[i] == 1){
                for(int j=i;j<=M;j+=i) if(nPrime[j] > 0){
                    for(int k=0;;k++){
                        if(divisors[j][k]==0){
                            divisors[j][k] = i;
                            break;
                        }
                    }
                }
            }
            if(nPrime[i] > 0){
                int[] tmp = new int[nPrime[i]];
                for(int j=0;j<nPrime[i];j++) tmp[j] = divisors[i][j];
                for(int j=0;j<(1<<nPrime[i]);j++){
                    int val = 1;
                    for(int k=0;k<nPrime[i];k++) if((j&(1<<k)) != 0) val *= tmp[k];
                    divisors[i][j] = val;
                }
            }
        }
    }

    int gcd(int p, int q)
    {
        while(q > 0){
            int tmp = q;
            q = p%q;
            p = tmp;
        }
        return p;
    }

    int square_root(long N){
        long cnd = (long)(Math.pow(N, 1.0 / 2.0)) + 2;
        while(cnd*cnd > N) --cnd;
        return (int)cnd;
    }
    
    int cubic_root(long N){
        long cnd = (long)(Math.pow(N, 1.0 / 3.0)) + 2;
        while(cnd*cnd*cnd > N) --cnd;
        return (int)cnd;
    }
    
    int quad_root(long N){
        long cnd = (long)(Math.pow(N, 1.0 / 4.0)) + 2;
        while(cnd*cnd*cnd*cnd > N) --cnd;
        return (int)cnd;
    }

    long countSub(long N){
        if(N==0) return 0;
        
        long ret = 0;
        
        //find a*(b^p) (a<b)
        //pattern 1: p=2
        int iMax = cubic_root(N);
        for(int i=1;i<=iMax;i++){
            if(tbl[1][i] == tbl[1][i-1] + 1){
                int mn = i+1;
                int mx = square_root(N/i);
                ret += mx-mn+1;
            }
        }
        
        //pattern 2: p=3
        int xMax = quad_root(N);
        long tmp = 0;
        for(int x=1;x<=xMax;x++){
            int yMin = x+1;
            int yMax = cubic_root(N/x); //(int)(Math.pow(N/x, 1.0/3.0) + 1e-8);
            
            if(tri_tbl[x]) continue;
            for(int k=1;k*k*k<=x;k++){
                int g = gcd(x, k*k);
                int kd = k*k/g, xd = x/g;
                
                int yMin2 = (yMin-1)/kd, yMax2 = yMax/kd;
                tmp += yMax2 - yMin2;
                
                int divc = nPrime[xd];
                if(divc==-1) continue;
                
                //System.out.print(x + "," + k + ":");
                long bas = ret;
                for(int l=0;l<(1<<divc);l++){
                    int v = divisors[xd][l];
                    int ad = tbl[v][yMax2/v] - tbl[v][yMin2/v];
                    if(nPrime[v] % 2 == 1) ad *= -1;
                    ret += ad;
                }
                //System.out.println(ret - bas);
            }
        }
        System.out.println(tmp);

        return ret;
    }

    public long count(long L, long R){
        init(464160, 17783); //N^(1/3), N^(1/4)
        
        return countSub(R) - countSub(L-1);
    }
    
    public String checkData(long L, long R){
        long mVal = 80000000000000000L;
        
        if(L <= 0 || L > mVal) return "L must be between 1 and 8*10^16, inclusive.";
        if(R < L || R > mVal) return "R must be between L and 8*10^16, inclusive.";
        
        return "";
    }
}
