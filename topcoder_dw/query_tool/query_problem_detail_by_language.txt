SELECT l.language_name
     , l.language_id
     , pl.problems_submitted
     , pl.problems_correct
     , CASE WHEN pl.problems_submitted = 0 THEN 0 ELSE pl.problems_correct/pl.problems_submitted END AS submission_accuracy
     , pl.problems_failed_by_challenge
     , pl.problems_failed_by_system_test
     , pl.challenge_attempts_made
     , CASE WHEN pl.challenge_attempts_made = 0 THEN 0 ELSE pl.problems_failed_by_challenge/pl.challenge_attempts_made END AS challenge_accuracy
     , best.time_elapsed as best_time
     , best.coder_id
     , pl.avg_time_elapsed as avg_time
     , pl.round_id
     , pl.problem_id
  FROM language_lu l
     , outer problem_language pl
     , OUTER (problem_language pl1, table(multiset(
	select min(cp.coder_id) as coder_id, cp.time_elapsed, cp.language_id
          from coder_problem cp
         where cp.round_id = @rd@
           and cp.problem_id = @pm@
           and cp.division_id = @dn@
           and cp.language_placed = 1
         group by cp.time_elapsed, cp.language_id
       )) best)
 WHERE pl.round_id = @rd@
   AND pl.problem_id = @pm@
   AND pl.division_id = @dn@
   AND l.status = 'Y'
   and l.language_id in (1,3,4,5) --do not include python
   AND pl.language_id = l.language_id
   and best.language_id = pl1.language_id
   and pl1.round_id = @rd@
   and pl1.problem_id = @pm@
   and pl1.division_id = @dn@
   and pl1.language_id = l.language_id
   AND EXISTS (SELECT '1'
                 FROM problem p
                WHERE p.problem_id = pl.problem_id
                  AND p.round_id = pl.round_id
                  AND p.division_id = pl.division_id
                  AND p.viewable = 1)
 ORDER by l.language_id