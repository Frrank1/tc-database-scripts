SELECT  s.tc_direct_project_id AS tc_direct_project_id,
	SUM(case when s.status='Completed' then 1 else 0 end) AS completed_number,
        SUM(case when (s.status='Cancelled' ) then 1 else 0 end) AS cancelled_number,  
	SUM(s.member_cost) AS total_member_cost,
	ROUND ((SUM(case when s.status='Completed' then s.member_cost else 0 end)/(case when SUM(case when s.status='Completed' then 1 else 0 end)=0 
				then 1 else SUM(case when s.status='Completed' then 1 else 0 end) end)), 2) AS average_member_cost,
	SUM(CASE WHEN (s.contest_fee_percentage = 0) THEN s.contest_fee ELSE s.contest_fee_percentage * s.member_cost END)
	    AS total_contest_fee,
	    
	ROUND (SUM(CASE WHEN (s.contest_fee_percentage IS NULL  or s.contest_fee_percentage =0) THEN s.contest_fee ELSE s.contest_fee_percentage * s.member_cost END)
	    / (case when SUM(case when s.status='Completed' then 1 else 0 end)=0 
				then 1 else SUM(case when s.status='Completed' then 1 else 0 end) end), 2) AS average_contest_fee,
	
	SUM((CASE WHEN (s.contest_fee_percentage IS NULL  or s.contest_fee_percentage =0) THEN s.contest_fee ELSE s.contest_fee_percentage * s.member_cost END) + s.member_cost) AS total_cost,
	
	ROUND (SUM(case when s.status='Completed' then 1 else 0 end)*100/(case when SUM (case when s.status!='Cancelled' then 1 else 0 end)=0
                               then 1 else SUM (case when s.status!='Cancelled' then 1 else 0 end) end), 2) AS fullfillment,
    SUM(CASE 
            WHEN NOT (s.posting_date IS NULL OR s.complete_date IS NULL) 
            THEN (((s.complete_date - s.posting_date)::INTERVAL MINUTE(9) TO MINUTE::CHAR(20)::DECIMAL(10)) / 60) - s.approval_phase_duration 
	        ELSE 0 
	    END)
	/ 
	(CASE 
	        WHEN SUM(CASE 
                         WHEN NOT (s.posting_date IS NULL OR s.complete_date IS NULL) 
                         THEN 1 
                         ELSE 0 
	                 END) = 0 
	        THEN 1
	        ELSE SUM(CASE 
                         WHEN NOT (s.posting_date IS NULL OR s.complete_date IS NULL) 
                         THEN 1 ELSE 0 
	                 END)
	    END
	)
    AS average_duration
    
    
FROM table(MULTISET(SELECT
p.tc_direct_project_id as tc_direct_project_id,  
case when ppd.actual_start_time is not null then ppd.actual_start_time else psd.actual_start_time end as posting_date,
to_date(pi1.value[1,16], '%m.%d.%Y %H:%M') as complete_date,

case when p.project_status_id = 7 then
    NVL((SELECT sum(total_amount)
       FROM  informixoltp:payment_detail pmd, informixoltp:payment pm
        WHERE pmd.component_project_id = p.project_id and pmd.installment_number = 1
        and pm.most_recent_detail_id = pmd.payment_detail_id 
        AND NOT pmd.payment_status_id IN (65, 68, 69)), 0)
    +
    NVL((SELECT sum(pmd2.total_amount) 
           FROM  informixoltp:payment_detail pmd,  
                 informixoltp:payment pm LEFT OUTER JOIN informixoltp:payment_detail pmd2 on pm.payment_id = pmd2.parent_payment_id, 
                 informixoltp:payment pm2 
            WHERE pmd.component_project_id = p.project_id and pmd2.installment_number = 1 
            and pm.most_recent_detail_id = pmd.payment_detail_id  
            and pm2.most_recent_detail_id = pmd2.payment_detail_id 
            AND NOT pmd2.payment_status_id IN (65, 68, 69)), 0)
    +
    nvl((select nvl(sum (cast (nvl (pi30.value, '0') as DECIMAL (10,2))), 0) from project_info pi30, project_info pi26
        where pi30.project_info_type_id = 30 and pi26.project_info_type_id = 26 and pi26.project_id = pi30.project_id 
        and pi26.value = 'On'
        and pi26.project_id =  p.project_id ), 0)
 else NVL((SELECT sum(total_amount)
       FROM  informixoltp:payment_detail pmd, informixoltp:payment pm
        WHERE pmd.component_project_id = p.project_id and pmd.installment_number = 1
        and pm.most_recent_detail_id = pmd.payment_detail_id 
        AND NOT pmd.payment_status_id IN (65, 68, 69)), 0)
    +
    NVL((SELECT sum(pmd2.total_amount) 
           FROM  informixoltp:payment_detail pmd,  
                 informixoltp:payment pm LEFT OUTER JOIN informixoltp:payment_detail pmd2 on pm.payment_id = pmd2.parent_payment_id, 
                 informixoltp:payment pm2 
            WHERE pmd.component_project_id = p.project_id and pmd2.installment_number = 1 
            and pm.most_recent_detail_id = pmd.payment_detail_id  
            and pm2.most_recent_detail_id = pmd2.payment_detail_id 
            AND NOT pmd2.payment_status_id IN (65, 68, 69)), 0)
 end as member_cost,

(select nvl(sum (cast (nvl (value, '0') as DECIMAL (10,2))), 0) from project_info
        where project_info_type_id = 31 and exists (select * from project_phase where project_id = p.project_id and phase_type_id = 1 and phase_status_id in (2,3))
        and project_id = p.project_id) as contest_fee,
        
nvl((select cast (nvl(pi57.value, '0') as DECIMAL (10,2)) from project_info pi57
                where p.project_id = pi57.project_id and pi57.project_info_type_id = 57),0) as contest_fee_percentage, 

case when p.project_status_id = 7 then 'Completed'
when p.project_status_id in (9, 10) then 'Cancelled'
else 'Failed' end as status,
NVL((SELECT SUM(((actual_end_time - actual_start_time)::INTERVAL MINUTE(9) TO MINUTE::CHAR(20)::DECIMAL(10)) / 60) 
     FROM project_phase ppa
     WHERE ppa.project_id = p.project_id 
     AND ppa.phase_type_id = 11 
     AND NOT (ppa.actual_start_time IS NULL 
              OR ppa.actual_end_time IS NULL)), 0) 
AS approval_phase_duration
from project p, OUTER project_phase psd, OUTER project_phase ppd, outer project_info pi1
where p.project_id = ppd.project_id and psd.phase_type_id = 2 and ppd.phase_type_id = 1 and psd.project_id = p.project_id
and pi1.project_id = p.project_id  and pi1.project_info_type_id = 21
and p.tc_direct_project_id = @tcdirectid@ and project_status_id in (7,4,5,6,8,9,10,11) 
and p.project_category_id != 27
and (exists (select u.user_id 
         from user as u 
         join user_role_xref as uref 
            on u.user_id = @uid@
            and u.user_id = uref.login_id 
         join security_roles as sr 
            on uref.role_id = sr.role_id 
            and sr.description in ('TC Staff'))
     OR exists (select permission_type_id 
               from user_permission_grant as upg   
              where resource_id=p.tc_direct_project_id and permission_type_id in (1,2,3) 
               and upg.user_id = @uid@ ))
)) AS s
GROUP BY tc_direct_project_id;
