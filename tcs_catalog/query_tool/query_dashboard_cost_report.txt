SELECT s.project_id,
    s.client,
    s.client_id,
    s.billing_project_name,
    s.billing_project_id,
    s.direct_project_name,
    s.direct_project_id,
    s.launch_date,
    s.completion_date,
    s.category,
    s.project_category_id,
    s.contest_name,
    s.is_studio,
   nvl((case when s.contest_fee_percentage = 0 or s.contest_fee_percentage is null then s.contest_fee
         else (case when s.project_status_id = 7 then s.contest_fee_percentage * s.actual_Member_Costs
                else s.contest_fee_percentage * s.estimated_member_costs end)
         end), 0) as contest_fee,
    s.contest_status,
    s.estimated_member_costs,
    s.actual_Member_Costs
    
FROM table(MULTISET(select p.project_id,
       ttc.name client,
       ttc.client_id,
       ttp.name billing_project_name,
       ttp.project_id billing_project_id,
       tdp.name direct_project_name,
       tdp.project_id direct_project_id,
       (select min(nvl(actual_start_time, scheduled_start_time)) from project_phase ph where ph.project_id=p.project_id and ph.phase_type_id = 1) as launch_date,
       ct.completion_time completion_date,
       DECODE(pc.name, 'UI Prototype Competition', 'UI Prototype', 'Assembly Competition', 'Assembly', 'RIA Build Competition', 'RIA Build', 'Test Suites', 'Test Suites', 'Test Scenarios', 'Test Scenarios',  pc.name) category,
       pc.project_category_id,
       pi.value as contest_name,
       0 as is_studio,
       case when p.project_status_id in (9, 10) and exists (select * from project_phase where project_id = p.project_id and phase_type_id = 1 and phase_status_id in (2,3))
            then pi2.value::DECIMAL(10,2)
            when p.project_status_id in (9, 10) and not exists (select * from project_phase where project_id = p.project_id and phase_type_id = 1 and phase_status_id in (2,3))
            then 0 
            else pi2.value::DECIMAL(10,2) end as contest_fee,
       CASE
       WHEN ps.project_status_id not in (1,2,3)
          THEN 'Finished'
       WHEN not exists(select actual_start_time from project_phase pp where pp.project_id = p.project_id and pp.phase_type_id = 1 and pp.actual_start_time <= current )
          THEN 'Scheduled'
       WHEN (select actual_start_time from project_phase pp where pp.project_id = p.project_id and pp.phase_type_id = 1 and pp.actual_start_time <= current ) <= current
          THEN 'Active'
       ELSE
          'Active'
       END as contest_status,
       
    nvl((select cast (nvl(pi57.value, '0') as DECIMAL (10,2)) from project_info pi57
                where p.project_id = pi57.project_id and pi57.project_info_type_id = 57),0) as contest_fee_percentage,
    p.project_status_id,
    
        nvl((select nvl(sum (cast (nvl (value, '0') as DECIMAL (10,2))), 0) from project_info
                where project_info_type_id in (33, 35, 16, 38, 39, 49)
                and project_id = p.project_id), 0)
            +
            nvl(((select nvl(sum (cast (nvl (value, '0') as DECIMAL (10,2))), 0) from project_info
                where project_info_type_id = 16
                and project_id = p.project_id)/2), 0)
            +
            nvl((select nvl(sum (cast (nvl (pi30.value, '0') as DECIMAL (10,2))), 0) from project_info pi30, project_info pi26
                where pi30.project_info_type_id = 30 and pi26.project_info_type_id = 26 and pi26.project_id = pi30.project_id 
                and pi26.value = 'On'
                and pi26.project_id =  p.project_id ), 0) as estimated_member_costs,

  SUM(case when p.project_status_id = 7 then
      NVL((SELECT sum(total_amount)
       FROM  informixoltp:payment_detail pmd, informixoltp:payment pm
        WHERE pmd.component_project_id = p.project_id and pmd.installment_number = 1
        and pm.most_recent_detail_id = pmd.payment_detail_id 
        AND NOT pmd.payment_status_id IN (65, 68, 69)), 0)
    +
    NVL((SELECT sum(pmd2.total_amount) 
           FROM  informixoltp:payment_detail pmd,  
                 informixoltp:payment pm LEFT OUTER JOIN informixoltp:payment_detail pmd2 on pm.payment_id = pmd2.parent_payment_id, 
                 informixoltp:payment pm2 
            WHERE pmd.component_project_id = p.project_id and pmd2.installment_number = 1 
            and pm.most_recent_detail_id = pmd.payment_detail_id  
            and pm2.most_recent_detail_id = pmd2.payment_detail_id 
            AND NOT pmd2.payment_status_id IN (65, 68, 69)), 0)
     +
    nvl((select nvl(sum (cast (nvl (pi30.value, '0') as DECIMAL (10,2))), 0) from project_info pi30, project_info pi26
        where pi30.project_info_type_id = 30 and pi26.project_info_type_id = 26 and pi26.project_id = pi30.project_id 
        and pi26.value = 'On'
        and pi26.project_id =  p.project_id ), 0)
  else NVL((SELECT sum(total_amount)
       FROM  informixoltp:payment_detail pmd, informixoltp:payment pm
        WHERE pmd.component_project_id = p.project_id and pmd.installment_number = 1
        and pm.most_recent_detail_id = pmd.payment_detail_id 
        AND NOT pmd.payment_status_id IN (65, 68, 69)), 0)
    +
    NVL((SELECT sum(pmd2.total_amount) 
           FROM  informixoltp:payment_detail pmd,  
                 informixoltp:payment pm LEFT OUTER JOIN informixoltp:payment_detail pmd2 on pm.payment_id = pmd2.parent_payment_id, 
                 informixoltp:payment pm2 
            WHERE pmd.component_project_id = p.project_id and pmd2.installment_number = 1 
            and pm.most_recent_detail_id = pmd.payment_detail_id  
            and pm2.most_recent_detail_id = pmd2.payment_detail_id 
            AND NOT pmd2.payment_status_id IN (65, 68, 69)), 0)
  end) as actual_Member_Costs
from project p,      
     tc_direct_project tdp,
     project_status_lu ps,
     project_category_lu pc,
     project_info pi, -- project name
     project_info pi2, -- contest_fee
     project_info pi3, -- billing account
     time_oltp:project ttp,
     time_oltp:client_project ttcp,
     time_oltp:client ttc,
          table (multiset((select  ph.project_id,  MAX(NVL(actual_end_time, scheduled_end_time)) as completion_time from project_phase ph, project_category_lu pcl, project pp
                                        where phase_type_id = (case when pp.project_category_id in (9, 29) then 4
                                                                   when pcl.project_type_id in (1,2) then 10
								else 4 end)
				and pcl.project_category_id = pp.project_category_id and ph.project_id = pp.project_id  GROUP BY ph.project_id))) ct,
     table (multiset((select unique upg.resource_id from user_permission_grant upg
                where upg.user_id=DECODE(@uid@,0,upg.user_id,@uid@) and upg.permission_type_id IN (0,1,2,3)))) up --user permission table
where p.project_status_id = ps.project_status_id
  and p.project_category_id = pc.project_category_id
  and p.project_category_id IN (@pcids@)
  and p.project_id = ct.project_id
  and p.project_id = pi.project_id
  and pi.project_info_type_id = 6
  and p.project_id = pi2.project_id
  and pi2.project_info_type_id = 31
  and p.project_id = pi3.project_id
  and pi3.project_info_type_id = 32
  and pi3.value = ttp.project_id
  and ttp.project_id = ttcp.project_id
  and ttcp.client_id = ttc.client_id
  and p.project_status_id != 3 and p.project_category_id != 27
  and ttc.client_id = DECODE(@clientid@, 0, ttc.client_id, @clientid@)
  and ttp.project_id = DECODE(@billingaccountid@, 0, ttp.project_id, @billingaccountid@)
  and p.tc_direct_project_id = tdp.project_id
  and up.resource_id = tdp.project_id
  and pc.project_type_id  != 3
  and tdp.project_id = DECODE(@tcdirectid@, 0, tdp.project_id, @tcdirectid@)
  and (ct.completion_time BETWEEN TO_DATE('@sdt@ 00:00:00', '%Y-%m-%d %H:%M:%S') AND TO_DATE('@edt@ 23:59:59', '%Y-%m-%d %H:%M:%S'))
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17

UNION

select p.project_id,
       ttc.name client,
       ttc.client_id,
       ttp.name billing_project_name,
       ttp.project_id billing_project_id,
       tdp.name direct_project_name,
       tdp.project_id direct_project_id,
       (select max (scheduled_start_time) from project_phase where phase_type_id = 1 and project_id = p.project_id) as launch_date,
       ct.completion_time completion_date,
       DECODE(pc.name, 'UI Prototype Competition', 'UI Prototype', 'Assembly Competition', 'Assembly', 'RIA Build Competition', 'RIA Build', 'Test Suites', 'Test Suites', 'Test Scenarios', 'Test Scenarios',  pc.name) category,
       pc.project_category_id,
       pi.value as contest_name,
       0 as is_studio,
       case when p.project_status_id in (9, 10) and exists (select * from project_phase where project_id = p.project_id and phase_type_id = 1 and phase_status_id in (2,3))
            then pi2.value::DECIMAL(10,2)
            when p.project_status_id in (9, 10) and not exists (select * from project_phase where project_id = p.project_id and phase_type_id = 1 and phase_status_id in (2,3))
            then 0 
            else pi2.value::DECIMAL(10,2) end as contest_fee,
       CASE
       WHEN ps.project_status_id not in (1,2,3)
          THEN 'Finished'
       WHEN not exists(select actual_start_time from project_phase pp where pp.project_id = p.project_id and pp.phase_type_id = 1 and pp.actual_start_time <= current )
          THEN 'Scheduled'
       WHEN (select actual_start_time from project_phase pp where pp.project_id = p.project_id and pp.phase_type_id = 1 and pp.actual_start_time <= current ) <= current
          THEN 'Active'
       ELSE
          'Active'
       END as contest_status,

    (select nvl(pcfp.contest_fee_percentage, 0) from time_oltp:project_contest_fee_percentage pcfp
            where ttp.project_id = pcfp.project_id and pcfp.active = 'T') as contest_fee_percentage,
    p.project_status_id,
    
        nvl((SELECT sum(prize_amount * number_of_submissions) from project_prize_xref ppx, prize pr
                where ppx.prize_id = pr.prize_id  and ppx.project_id = p.project_id), 0)
		+
		nvl(((select nvl(sum (cast (nvl (value, '0') as DECIMAL (10,2))), 0) from project_info
			where project_info_type_id in (33, 35, 38, 39, 49)
			and project_id = p.project_id)), 0)
		+
		nvl((select nvl(sum (cast (nvl (pi30.value, '0') as DECIMAL (10,2))), 0) from project_info pi30, project_info pi26
			where pi30.project_info_type_id = 30 and pi26.project_info_type_id = 26 and pi26.project_id = pi30.project_id 
			and pi26.value = 'On'
			and pi26.project_id =  p.project_id ), 0) as estimated_member_costs,

  SUM(case when p.project_status_id = 7 then
      NVL((SELECT sum(total_amount)
       FROM  informixoltp:payment_detail pmd, informixoltp:payment pm
        WHERE pmd.component_project_id = p.project_id and pmd.installment_number = 1
        and pm.most_recent_detail_id = pmd.payment_detail_id 
        AND NOT pmd.payment_status_id IN (65, 68, 69)), 0)
    +
    NVL((SELECT sum(pmd2.total_amount) 
           FROM  informixoltp:payment_detail pmd,  
                 informixoltp:payment pm LEFT OUTER JOIN informixoltp:payment_detail pmd2 on pm.payment_id = pmd2.parent_payment_id, 
                 informixoltp:payment pm2 
            WHERE pmd.component_project_id = p.project_id and pmd2.installment_number = 1 
            and pm.most_recent_detail_id = pmd.payment_detail_id  
            and pm2.most_recent_detail_id = pmd2.payment_detail_id 
            AND NOT pmd2.payment_status_id IN (65, 68, 69)), 0)
     +
    nvl((select nvl(sum (cast (nvl (pi30.value, '0') as DECIMAL (10,2))), 0) from project_info pi30, project_info pi26
        where pi30.project_info_type_id = 30 and pi26.project_info_type_id = 26 and pi26.project_id = pi30.project_id 
        and pi26.value = 'On'
        and pi26.project_id =  p.project_id ), 0)
  else NVL((SELECT sum(total_amount)
       FROM  informixoltp:payment_detail pmd, informixoltp:payment pm
        WHERE pmd.component_project_id = p.project_id and pmd.installment_number = 1
        and pm.most_recent_detail_id = pmd.payment_detail_id 
        AND NOT pmd.payment_status_id IN (65, 68, 69)), 0)
    +
    NVL((SELECT sum(pmd2.total_amount) 
           FROM  informixoltp:payment_detail pmd,  
                 informixoltp:payment pm LEFT OUTER JOIN informixoltp:payment_detail pmd2 on pm.payment_id = pmd2.parent_payment_id, 
                 informixoltp:payment pm2 
            WHERE pmd.component_project_id = p.project_id and pmd2.installment_number = 1 
            and pm.most_recent_detail_id = pmd.payment_detail_id  
            and pm2.most_recent_detail_id = pmd2.payment_detail_id 
            AND NOT pmd2.payment_status_id IN (65, 68, 69)), 0)
  end) as actual_Member_Costs
from project p,      
     tc_direct_project tdp,
     project_status_lu ps,
     project_category_lu pc,
     project_info pi, -- project name
     project_info pi2, -- contest_fee
     project_info pi3, -- billing account
     time_oltp:project ttp,
     time_oltp:client_project ttcp,
     time_oltp:client ttc,
     table (multiset((select  project_id, MAX(NVL(actual_end_time, scheduled_end_time)) as completion_time from project_phase where phase_type_id = 4 GROUP BY project_id))) ct,
     table (multiset((select unique upg.resource_id from user_permission_grant upg
                where upg.user_id=DECODE(@uid@,0,upg.user_id,@uid@) and upg.permission_type_id IN (0,1,2,3)))) up --user permission table     
where p.project_status_id = ps.project_status_id
  and p.project_category_id = pc.project_category_id
  and p.project_category_id IN (@pcids@)
  and p.project_id = ct.project_id
  and p.project_id = pi.project_id
  and pi.project_info_type_id = 6
  and p.project_id = pi2.project_id
  and pi2.project_info_type_id = 31
  and p.project_id = pi3.project_id
  and pi3.project_info_type_id = 32
  and pi3.value = ttp.project_id
  and ttp.project_id = ttcp.project_id
  and ttcp.client_id = ttc.client_id
  and p.project_status_id != 3 and p.project_category_id != 27
  and ttc.client_id = DECODE(@clientid@, 0, ttc.client_id, @clientid@)
  and ttp.project_id = DECODE(@billingaccountid@, 0, ttp.project_id, @billingaccountid@)
  and p.tc_direct_project_id = tdp.project_id
  and up.resource_id = tdp.project_id
  and pc.project_type_id = 3
  and tdp.project_id = DECODE(@tcdirectid@, 0, tdp.project_id, @tcdirectid@)
  and (ct.completion_time BETWEEN TO_DATE('@sdt@ 00:00:00', '%Y-%m-%d %H:%M:%S') AND TO_DATE('@edt@ 23:59:59', '%Y-%m-%d %H:%M:%S'))
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17)) AS s

