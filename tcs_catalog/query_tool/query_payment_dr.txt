SELECT (pm.create_date) as payment_date,     -- 1
    p.project_id as contest_id,             -- 2
    pi.value as contest_name,                -- 3
    tdp.project_id direct_project_id,        -- 4

    null::int as payment_id,                 -- 5
    
    'DR' as payment_type,                     -- 6
    
    case when p.project_status_id in (1,7)             -- 'Active', 'Completed'
        then
            nvl((select nvl(sum (cast (nvl (pi30.value, '0') as DECIMAL (10,2))), 0) 
                    from project_info pi30, project_info pi26
                    where pi30.project_info_type_id = 30                 -- 'DR points'
                        and pi26.project_info_type_id = 26                 -- 'Digital Run Flag'
                        and pi26.project_id = pi30.project_id 
                        and pi26.value = 'On'
                        and pi26.project_id =  p.project_id ), 
                    0) 
        else 0 
        end as amount,                        -- 7
  
    'Digital Run' as payment_type_desc      -- 8

FROM informixoltp:payment pm 
        INNER JOIN informixoltp:payment_detail pmd ON pm.most_recent_detail_id = pmd.payment_detail_id,
         informixoltp:payment_type_lu pt, 
         project p, 
         tc_direct_project tdp, 
         project_category_lu pc,
         project_info pi, 
         project_info pi26,
         project_info pi3, 
        time_oltp:project ttp
     
where  pmd.component_project_id = p.project_id                             
        and pmd.payment_type_id = pt.payment_type_id 
           and pmd.installment_number = 1 
           AND NOT pmd.payment_status_id IN (65,68, 69)                        -- Filter out all the 'Cancelled', 'Expired', 'Deleted'

          and p.project_category_id = pc.project_category_id

          and p.project_id = pi.project_id and pi.project_info_type_id = 6    -- Join the 'Project Name' project_info
          and p.project_id = pi26.project_id and pi26.project_info_type_id = 26 and pi26.value = 'On'    -- Join the 'Digital Run Flag' project_info and the flag must be on

          -- Join the billing project
          and p.project_id = pi3.project_id  and pi3.project_info_type_id = 32        -- "Billing Project"
          and pi3.value = ttp.project_id  
        
          and p.project_category_id != 27                                    -- The contest (project) shouldn't be a 'Spec Review'

          and p.tc_direct_project_id = tdp.project_id
          
           -- If parameter specifies the contest category name, we only use the corresponding contest category and the related contests.    
          and pc.name = DECODE('@ctn@', '', pc.name, '@ctn@')
      
          -- If parameter specifies the direct project ID, we only use the corresponding direct project and the related records.
          and tdp.project_id = DECODE(@tcdirectid@, 0, tdp.project_id, @tcdirectid@)
      
          -- If parameter specifies the contest, only use the contest and the related records.
          and p.project_id = DECODE(@pj@, 0, p.project_id, @pj@)            
 
          -- The following statements select the contest where the DR payments are applicable here:
          and (p.project_status_id = 7                                     -- 'Completed'
               OR (p.project_status_id  = 1                                 -- 'Active'
                   and (p.project_category_id in (9, 29)                     -- 'Bug Hunt', "Copilot Posting"
                       or pc.project_type_id = 3)                            -- 'Studio'
                      and exists (select phase_type_id 
                                      from project_phase
                                where project_id = p.project_id 
                                    and phase_type_id =4                 -- 'Review'
                                    and phase_status_id = 3))            -- 'Closed'
            OR (p.project_status_id  = 1                                 -- 'Active'
                and (p.project_category_id not in (9, 29)                 -- 'Bug Hunt', "Copilot Posting"
                    and pc.project_type_id in (1,2))                    -- 'Component', 'Application'
                      and (exists 
                              (select phase_type_id 
                              from project_phase    
                              where project_id = p.project_id 
                                  and phase_type_id = 11                         -- 'Approval'
                                  and phase_status_id in(2,3))                -- 'Open', 'Closed'
                    OR not exists 
                        (select phase_type_id 
                        from project_phase    
                        where project_id = p.project_id 
                            and phase_type_id = 10                         -- 'Final Review'
                            and phase_status_id in (1,2))))                -- 'Scheduled', 'Open'
        )
          
          -- The following statements are used to ensure that the DR for the contest is applicable to be paided.
          -- And the payment creation date can be determined by the corresponding record.
           and pmd.payment_type_id in(6, 29, 10, 42, 43, 44, 49, 50, 51, 55, 61, 64, 65, 60, 13)
               -- 'Component Payment'(6), 'Architecture Payment' (29), 'Assembly Payment' (10), 'Specification Contest Payment' (42), 'Conceptualization Contest Payment'(43)
               -- 'Test Suites Payment' (44), 'UI Prototype Competition Payment' (49), 'RIA Build Competition Payment' (50), 'RIA Component Competition Payment' (51),
               -- 'Test Scenarios Payment' (55), 'Content Creation Payment' (61), "Contest Checkpoint Payment" (64), "Contest Payment" (65),
               -- 'Copilot Posting Payment' (60), 'Topcoder Studio Contest Payment' (13)
               
           and pmd.payment_detail_id =
              (select min(pmd2.payment_detail_id) 
                  from informixoltp:payment pm2  
                    INNER JOIN informixoltp:payment_detail pmd2 ON pm2.most_recent_detail_id = pmd2.payment_detail_id
                where pmd2.component_project_id = p.project_id
                       and pmd2.installment_number = 1
                       AND NOT pmd2.payment_status_id IN (65,68, 69)         --- 'Cancelled', 'Expired', 'Deleted'
                       and pmd2.payment_type_id in (6, 29, 10, 42, 43, 44, 49, 50, 51, 55, 61, 64, 65, 60, 13))
          
        --- Here we specify the payment creation date range    
          and (pm.create_date BETWEEN TO_DATE('@sdt@ 00:00:00', '%Y-%m-%d %H:%M:%S') AND TO_DATE('@edt@ 23:59:59', '%Y-%m-%d %H:%M:%S'))

      --- The following are permission related
    and (exists (select resource_id 
                from user_permission_grant upg
                where upg.user_id=DECODE(@uid@,0,upg.user_id,@uid@) 
                    and upg.permission_type_id IN (0,1,2,3)         -- 'project_report', 'project_read', 'project_write', 'project_full' 
                    and upg.resource_id = p.tc_direct_project_id)
           
           or
           exists(select gadp.tc_direct_project_id
                from group_member AS gm, group_associated_direct_projects AS gadp
                where gm.group_id = gadp.group_id AND gm.active = 1
                AND gm.user_id = DECODE(@uid@,0,gm.user_id,@uid@)
                AND gadp.tc_direct_project_id = tdp.project_id)
       or
       exists(select gaba.billing_account_id
            from group_member AS gm, group_associated_billing_accounts AS gaba
            where gm.group_id = gaba.group_id AND gm.active = 1
            AND gm.user_id = DECODE(@uid@,0,gm.user_id,@uid@)
            AND gaba.billing_account_id = ttp.project_id)
            
            
		or exists(
		    SELECT UNIQUE
		        gm.group_id
		    FROM
		        tc_direct_project tdp2
		        INNER JOIN corporate_oltp:direct_project_account dpa ON tdp2.project_id = dpa.project_id
		        INNER JOIN tt_project ttp2 ON dpa.billing_account_id = ttp2.project_id
		        INNER JOIN tt_client_project ttcp2 ON ttp2.project_id = ttcp2.project_id
		        INNER JOIN tt_client ttc2 ON ttcp2.client_id = ttc2.client_id
		        INNER JOIN customer_group sg ON sg.client_id = ttc2.client_id
		        INNER JOIN group_member gm ON sg.group_id = gm.group_id
		    WHERE
		        sg.auto_grant = 1
		        AND   gm.active = 1
		        AND   sg.archived = 0
		        AND   ttc2.status = 1
		        AND tdp2.project_id = p.tc_direct_project_id
		        AND ((gm.use_group_default=0 and gm.specific_permission!='REPORT')
		                OR (gm.use_group_default=1 and sg.default_permission != 'REPORT'))
		        AND   gm.user_id = @uid@
		)
       )
                        
group by 1,2,3,4,5,6,7,8